apply plugin: "java"
apply plugin: 'kotlin'
apply plugin: 'maven'
apply plugin: 'com.github.johnrengelman.shadow'

sourceSets.main.java.srcDirs = [ "src/main/kotlin/" ]

project.ext.mainClassName = "polyrhythmmania.desktop.DesktopLauncher"
project.ext.assetsDir = new File("../core/assets");

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs += "-Xuse-experimental=kotlin.ExperimentalUnsignedTypes"
    }
}

eclipse {
    project {
        name = appName + "-desktop"
        linkedResource name: 'assets', type: '2', location: 'PARENT-1-PROJECT_LOC/core/assets'
    }
}

task afterEclipseImport(description: "Post processing after project generation", group: "IDE") {
  doLast {
    def classpath = new XmlParser().parse(file(".classpath"))
    new Node(classpath, "classpathentry", [ kind: 'src', path: 'assets' ]);
    def writer = new FileWriter(file(".classpath"))
    def printer = new XmlNodePrinter(new PrintWriter(writer))
    printer.setPreserveWhitespace(true)
    printer.print(classpath)
  }
}
repositories {
    mavenCentral()
}

shadowJar {
    archiveBaseName = "PolyrhythmMania"
    classifier = "distribution"
    archiveVersion = this.version
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives shadowJar
    archives sourcesJar
    archives javadocJar
}

jar {
    manifest {
        attributes "Main-Class": "polyrhythmmania.desktop.DesktopLauncher"
    }

    from {
        configurations.compile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}

